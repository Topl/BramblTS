/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: consensus/models/eligibility_certificate.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
export namespace co.topl.consensus.models {
    export class EligibilityCertificate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vrfSig?: Uint8Array;
            vrfVK?: Uint8Array;
            thresholdEvidence?: Uint8Array;
            eta?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vrfSig" in data && data.vrfSig != undefined) {
                    this.vrfSig = data.vrfSig;
                }
                if ("vrfVK" in data && data.vrfVK != undefined) {
                    this.vrfVK = data.vrfVK;
                }
                if ("thresholdEvidence" in data && data.thresholdEvidence != undefined) {
                    this.thresholdEvidence = data.thresholdEvidence;
                }
                if ("eta" in data && data.eta != undefined) {
                    this.eta = data.eta;
                }
            }
        }
        get vrfSig() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set vrfSig(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get vrfVK() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set vrfVK(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get thresholdEvidence() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set thresholdEvidence(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get eta() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set eta(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            vrfSig?: Uint8Array;
            vrfVK?: Uint8Array;
            thresholdEvidence?: Uint8Array;
            eta?: Uint8Array;
        }): EligibilityCertificate {
            const message = new EligibilityCertificate({});
            if (data.vrfSig != null) {
                message.vrfSig = data.vrfSig;
            }
            if (data.vrfVK != null) {
                message.vrfVK = data.vrfVK;
            }
            if (data.thresholdEvidence != null) {
                message.thresholdEvidence = data.thresholdEvidence;
            }
            if (data.eta != null) {
                message.eta = data.eta;
            }
            return message;
        }
        toObject() {
            const data: {
                vrfSig?: Uint8Array;
                vrfVK?: Uint8Array;
                thresholdEvidence?: Uint8Array;
                eta?: Uint8Array;
            } = {};
            if (this.vrfSig != null) {
                data.vrfSig = this.vrfSig;
            }
            if (this.vrfVK != null) {
                data.vrfVK = this.vrfVK;
            }
            if (this.thresholdEvidence != null) {
                data.thresholdEvidence = this.thresholdEvidence;
            }
            if (this.eta != null) {
                data.eta = this.eta;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vrfSig.length)
                writer.writeBytes(1, this.vrfSig);
            if (this.vrfVK.length)
                writer.writeBytes(2, this.vrfVK);
            if (this.thresholdEvidence.length)
                writer.writeBytes(3, this.thresholdEvidence);
            if (this.eta.length)
                writer.writeBytes(4, this.eta);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EligibilityCertificate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EligibilityCertificate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vrfSig = reader.readBytes();
                        break;
                    case 2:
                        message.vrfVK = reader.readBytes();
                        break;
                    case 3:
                        message.thresholdEvidence = reader.readBytes();
                        break;
                    case 4:
                        message.eta = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EligibilityCertificate {
            return EligibilityCertificate.deserialize(bytes);
        }
    }
}
