/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: consensus/models/protocol_version.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
export namespace co.topl.consensus.models {
    export class ProtocolVersion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            firstDigit?: number;
            secondDigit?: number;
            thirdDigit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("firstDigit" in data && data.firstDigit != undefined) {
                    this.firstDigit = data.firstDigit;
                }
                if ("secondDigit" in data && data.secondDigit != undefined) {
                    this.secondDigit = data.secondDigit;
                }
                if ("thirdDigit" in data && data.thirdDigit != undefined) {
                    this.thirdDigit = data.thirdDigit;
                }
            }
        }
        get firstDigit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set firstDigit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get secondDigit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set secondDigit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get thirdDigit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set thirdDigit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            firstDigit?: number;
            secondDigit?: number;
            thirdDigit?: number;
        }): ProtocolVersion {
            const message = new ProtocolVersion({});
            if (data.firstDigit != null) {
                message.firstDigit = data.firstDigit;
            }
            if (data.secondDigit != null) {
                message.secondDigit = data.secondDigit;
            }
            if (data.thirdDigit != null) {
                message.thirdDigit = data.thirdDigit;
            }
            return message;
        }
        toObject() {
            const data: {
                firstDigit?: number;
                secondDigit?: number;
                thirdDigit?: number;
            } = {};
            if (this.firstDigit != null) {
                data.firstDigit = this.firstDigit;
            }
            if (this.secondDigit != null) {
                data.secondDigit = this.secondDigit;
            }
            if (this.thirdDigit != null) {
                data.thirdDigit = this.thirdDigit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firstDigit != 0)
                writer.writeUint32(1, this.firstDigit);
            if (this.secondDigit != 0)
                writer.writeUint32(2, this.secondDigit);
            if (this.thirdDigit != 0)
                writer.writeUint32(3, this.thirdDigit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolVersion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.firstDigit = reader.readUint32();
                        break;
                    case 2:
                        message.secondDigit = reader.readUint32();
                        break;
                    case 3:
                        message.thirdDigit = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolVersion {
            return ProtocolVersion.deserialize(bytes);
        }
    }
}
