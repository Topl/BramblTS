/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../quivr/models/shared";
import * as dependency_3 from "./transaction/schedule";
import * as dependency_4 from "./address";
import * as dependency_5 from "./box/asset";
import * as dependency_6 from "./identifier";
import * as dependency_7 from "./../../google/protobuf/wrappers";
import * as dependency_8 from "./../../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({} & (({
            eon?: Event.Eon;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            groupPolicy?: never;
            seriesPolicy?: never;
        } | {
            eon?: never;
            era?: Event.Era;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            groupPolicy?: never;
            seriesPolicy?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: Event.Epoch;
            header?: never;
            ioTransaction?: never;
            groupPolicy?: never;
            seriesPolicy?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: Event.Header;
            ioTransaction?: never;
            groupPolicy?: never;
            seriesPolicy?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: Event.IoTransaction;
            groupPolicy?: never;
            seriesPolicy?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            groupPolicy?: Event.GroupPolicy;
            seriesPolicy?: never;
        } | {
            eon?: never;
            era?: never;
            epoch?: never;
            header?: never;
            ioTransaction?: never;
            groupPolicy?: never;
            seriesPolicy?: Event.SeriesPolicy;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eon" in data && data.eon != undefined) {
                    this.eon = data.eon;
                }
                if ("era" in data && data.era != undefined) {
                    this.era = data.era;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("ioTransaction" in data && data.ioTransaction != undefined) {
                    this.ioTransaction = data.ioTransaction;
                }
                if ("groupPolicy" in data && data.groupPolicy != undefined) {
                    this.groupPolicy = data.groupPolicy;
                }
                if ("seriesPolicy" in data && data.seriesPolicy != undefined) {
                    this.seriesPolicy = data.seriesPolicy;
                }
            }
        }
        get eon() {
            return pb_1.Message.getWrapperField(this, Event.Eon, 1) as Event.Eon;
        }
        set eon(value: Event.Eon) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_eon() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get era() {
            return pb_1.Message.getWrapperField(this, Event.Era, 2) as Event.Era;
        }
        set era(value: Event.Era) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_era() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get epoch() {
            return pb_1.Message.getWrapperField(this, Event.Epoch, 3) as Event.Epoch;
        }
        set epoch(value: Event.Epoch) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_epoch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get header() {
            return pb_1.Message.getWrapperField(this, Event.Header, 4) as Event.Header;
        }
        set header(value: Event.Header) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ioTransaction() {
            return pb_1.Message.getWrapperField(this, Event.IoTransaction, 5) as Event.IoTransaction;
        }
        set ioTransaction(value: Event.IoTransaction) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ioTransaction() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get groupPolicy() {
            return pb_1.Message.getWrapperField(this, Event.GroupPolicy, 6) as Event.GroupPolicy;
        }
        set groupPolicy(value: Event.GroupPolicy) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_groupPolicy() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get seriesPolicy() {
            return pb_1.Message.getWrapperField(this, Event.SeriesPolicy, 7) as Event.SeriesPolicy;
        }
        set seriesPolicy(value: Event.SeriesPolicy) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_seriesPolicy() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "eon" | "era" | "epoch" | "header" | "ioTransaction" | "groupPolicy" | "seriesPolicy";
            } = {
                0: "none",
                1: "eon",
                2: "era",
                3: "epoch",
                4: "header",
                5: "ioTransaction",
                6: "groupPolicy",
                7: "seriesPolicy"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            eon?: ReturnType<typeof Event.Eon.prototype.toObject>;
            era?: ReturnType<typeof Event.Era.prototype.toObject>;
            epoch?: ReturnType<typeof Event.Epoch.prototype.toObject>;
            header?: ReturnType<typeof Event.Header.prototype.toObject>;
            ioTransaction?: ReturnType<typeof Event.IoTransaction.prototype.toObject>;
            groupPolicy?: ReturnType<typeof Event.GroupPolicy.prototype.toObject>;
            seriesPolicy?: ReturnType<typeof Event.SeriesPolicy.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.eon != null) {
                message.eon = Event.Eon.fromObject(data.eon);
            }
            if (data.era != null) {
                message.era = Event.Era.fromObject(data.era);
            }
            if (data.epoch != null) {
                message.epoch = Event.Epoch.fromObject(data.epoch);
            }
            if (data.header != null) {
                message.header = Event.Header.fromObject(data.header);
            }
            if (data.ioTransaction != null) {
                message.ioTransaction = Event.IoTransaction.fromObject(data.ioTransaction);
            }
            if (data.groupPolicy != null) {
                message.groupPolicy = Event.GroupPolicy.fromObject(data.groupPolicy);
            }
            if (data.seriesPolicy != null) {
                message.seriesPolicy = Event.SeriesPolicy.fromObject(data.seriesPolicy);
            }
            return message;
        }
        toObject() {
            const data: {
                eon?: ReturnType<typeof Event.Eon.prototype.toObject>;
                era?: ReturnType<typeof Event.Era.prototype.toObject>;
                epoch?: ReturnType<typeof Event.Epoch.prototype.toObject>;
                header?: ReturnType<typeof Event.Header.prototype.toObject>;
                ioTransaction?: ReturnType<typeof Event.IoTransaction.prototype.toObject>;
                groupPolicy?: ReturnType<typeof Event.GroupPolicy.prototype.toObject>;
                seriesPolicy?: ReturnType<typeof Event.SeriesPolicy.prototype.toObject>;
            } = {};
            if (this.eon != null) {
                data.eon = this.eon.toObject();
            }
            if (this.era != null) {
                data.era = this.era.toObject();
            }
            if (this.epoch != null) {
                data.epoch = this.epoch.toObject();
            }
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.ioTransaction != null) {
                data.ioTransaction = this.ioTransaction.toObject();
            }
            if (this.groupPolicy != null) {
                data.groupPolicy = this.groupPolicy.toObject();
            }
            if (this.seriesPolicy != null) {
                data.seriesPolicy = this.seriesPolicy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_eon)
                writer.writeMessage(1, this.eon, () => this.eon.serialize(writer));
            if (this.has_era)
                writer.writeMessage(2, this.era, () => this.era.serialize(writer));
            if (this.has_epoch)
                writer.writeMessage(3, this.epoch, () => this.epoch.serialize(writer));
            if (this.has_header)
                writer.writeMessage(4, this.header, () => this.header.serialize(writer));
            if (this.has_ioTransaction)
                writer.writeMessage(5, this.ioTransaction, () => this.ioTransaction.serialize(writer));
            if (this.has_groupPolicy)
                writer.writeMessage(6, this.groupPolicy, () => this.groupPolicy.serialize(writer));
            if (this.has_seriesPolicy)
                writer.writeMessage(7, this.seriesPolicy, () => this.seriesPolicy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.eon, () => message.eon = Event.Eon.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.era, () => message.era = Event.Era.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.epoch, () => message.epoch = Event.Epoch.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.header, () => message.header = Event.Header.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ioTransaction, () => message.ioTransaction = Event.IoTransaction.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.groupPolicy, () => message.groupPolicy = Event.GroupPolicy.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.seriesPolicy, () => message.seriesPolicy = Event.SeriesPolicy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export namespace Event {
        export class Eon extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                beginSlot?: number;
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("beginSlot" in data && data.beginSlot != undefined) {
                        this.beginSlot = data.beginSlot;
                    }
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get beginSlot() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set beginSlot(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                beginSlot?: number;
                height?: number;
            }): Eon {
                const message = new Eon({});
                if (data.beginSlot != null) {
                    message.beginSlot = data.beginSlot;
                }
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    beginSlot?: number;
                    height?: number;
                } = {};
                if (this.beginSlot != null) {
                    data.beginSlot = this.beginSlot;
                }
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.beginSlot != 0)
                    writer.writeUint64(1, this.beginSlot);
                if (this.height != 0)
                    writer.writeUint64(2, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Eon {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Eon();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.beginSlot = reader.readUint64();
                            break;
                        case 2:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Eon {
                return Eon.deserialize(bytes);
            }
        }
        export class Era extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                beginSlot?: number;
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("beginSlot" in data && data.beginSlot != undefined) {
                        this.beginSlot = data.beginSlot;
                    }
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get beginSlot() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set beginSlot(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                beginSlot?: number;
                height?: number;
            }): Era {
                const message = new Era({});
                if (data.beginSlot != null) {
                    message.beginSlot = data.beginSlot;
                }
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    beginSlot?: number;
                    height?: number;
                } = {};
                if (this.beginSlot != null) {
                    data.beginSlot = this.beginSlot;
                }
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.beginSlot != 0)
                    writer.writeUint64(1, this.beginSlot);
                if (this.height != 0)
                    writer.writeUint64(2, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Era {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Era();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.beginSlot = reader.readUint64();
                            break;
                        case 2:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Era {
                return Era.deserialize(bytes);
            }
        }
        export class Epoch extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                beginSlot?: number;
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("beginSlot" in data && data.beginSlot != undefined) {
                        this.beginSlot = data.beginSlot;
                    }
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get beginSlot() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set beginSlot(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                beginSlot?: number;
                height?: number;
            }): Epoch {
                const message = new Epoch({});
                if (data.beginSlot != null) {
                    message.beginSlot = data.beginSlot;
                }
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    beginSlot?: number;
                    height?: number;
                } = {};
                if (this.beginSlot != null) {
                    data.beginSlot = this.beginSlot;
                }
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.beginSlot != 0)
                    writer.writeUint64(1, this.beginSlot);
                if (this.height != 0)
                    writer.writeUint64(2, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Epoch {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Epoch();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.beginSlot = reader.readUint64();
                            break;
                        case 2:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Epoch {
                return Epoch.deserialize(bytes);
            }
        }
        export class Header extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                height?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("height" in data && data.height != undefined) {
                        this.height = data.height;
                    }
                }
            }
            get height() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set height(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                height?: number;
            }): Header {
                const message = new Header({});
                if (data.height != null) {
                    message.height = data.height;
                }
                return message;
            }
            toObject() {
                const data: {
                    height?: number;
                } = {};
                if (this.height != null) {
                    data.height = this.height;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.height != 0)
                    writer.writeUint64(1, this.height);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.height = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Header {
                return Header.deserialize(bytes);
            }
        }
        export class IoTransaction extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                schedule?: dependency_3.co.topl.brambl.models.transaction.Schedule;
                metadata?: dependency_2.quivr.models.SmallData;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("schedule" in data && data.schedule != undefined) {
                        this.schedule = data.schedule;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
            }
            get schedule() {
                return pb_1.Message.getWrapperField(this, dependency_3.co.topl.brambl.models.transaction.Schedule, 1) as dependency_3.co.topl.brambl.models.transaction.Schedule;
            }
            set schedule(value: dependency_3.co.topl.brambl.models.transaction.Schedule) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_schedule() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get metadata() {
                return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.SmallData, 4) as dependency_2.quivr.models.SmallData;
            }
            set metadata(value: dependency_2.quivr.models.SmallData) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_metadata() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                schedule?: ReturnType<typeof dependency_3.co.topl.brambl.models.transaction.Schedule.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_2.quivr.models.SmallData.prototype.toObject>;
            }): IoTransaction {
                const message = new IoTransaction({});
                if (data.schedule != null) {
                    message.schedule = dependency_3.co.topl.brambl.models.transaction.Schedule.fromObject(data.schedule);
                }
                if (data.metadata != null) {
                    message.metadata = dependency_2.quivr.models.SmallData.fromObject(data.metadata);
                }
                return message;
            }
            toObject() {
                const data: {
                    schedule?: ReturnType<typeof dependency_3.co.topl.brambl.models.transaction.Schedule.prototype.toObject>;
                    metadata?: ReturnType<typeof dependency_2.quivr.models.SmallData.prototype.toObject>;
                } = {};
                if (this.schedule != null) {
                    data.schedule = this.schedule.toObject();
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_schedule)
                    writer.writeMessage(1, this.schedule, () => this.schedule.serialize(writer));
                if (this.has_metadata)
                    writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IoTransaction {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IoTransaction();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.schedule, () => message.schedule = dependency_3.co.topl.brambl.models.transaction.Schedule.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.metadata, () => message.metadata = dependency_2.quivr.models.SmallData.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IoTransaction {
                return IoTransaction.deserialize(bytes);
            }
        }
        export class GroupPolicy extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                label?: string;
                registrationUtxo?: dependency_4.co.topl.brambl.models.TransactionOutputAddress;
                fixedSeries?: dependency_6.co.topl.brambl.models.SeriesId;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                    if ("registrationUtxo" in data && data.registrationUtxo != undefined) {
                        this.registrationUtxo = data.registrationUtxo;
                    }
                    if ("fixedSeries" in data && data.fixedSeries != undefined) {
                        this.fixedSeries = data.fixedSeries;
                    }
                }
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set label(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get registrationUtxo() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.TransactionOutputAddress, 2) as dependency_4.co.topl.brambl.models.TransactionOutputAddress;
            }
            set registrationUtxo(value: dependency_4.co.topl.brambl.models.TransactionOutputAddress) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_registrationUtxo() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get fixedSeries() {
                return pb_1.Message.getWrapperField(this, dependency_6.co.topl.brambl.models.SeriesId, 3) as dependency_6.co.topl.brambl.models.SeriesId;
            }
            set fixedSeries(value: dependency_6.co.topl.brambl.models.SeriesId) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_fixedSeries() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                label?: string;
                registrationUtxo?: ReturnType<typeof dependency_4.co.topl.brambl.models.TransactionOutputAddress.prototype.toObject>;
                fixedSeries?: ReturnType<typeof dependency_6.co.topl.brambl.models.SeriesId.prototype.toObject>;
            }): GroupPolicy {
                const message = new GroupPolicy({});
                if (data.label != null) {
                    message.label = data.label;
                }
                if (data.registrationUtxo != null) {
                    message.registrationUtxo = dependency_4.co.topl.brambl.models.TransactionOutputAddress.fromObject(data.registrationUtxo);
                }
                if (data.fixedSeries != null) {
                    message.fixedSeries = dependency_6.co.topl.brambl.models.SeriesId.fromObject(data.fixedSeries);
                }
                return message;
            }
            toObject() {
                const data: {
                    label?: string;
                    registrationUtxo?: ReturnType<typeof dependency_4.co.topl.brambl.models.TransactionOutputAddress.prototype.toObject>;
                    fixedSeries?: ReturnType<typeof dependency_6.co.topl.brambl.models.SeriesId.prototype.toObject>;
                } = {};
                if (this.label != null) {
                    data.label = this.label;
                }
                if (this.registrationUtxo != null) {
                    data.registrationUtxo = this.registrationUtxo.toObject();
                }
                if (this.fixedSeries != null) {
                    data.fixedSeries = this.fixedSeries.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.label.length)
                    writer.writeString(1, this.label);
                if (this.has_registrationUtxo)
                    writer.writeMessage(2, this.registrationUtxo, () => this.registrationUtxo.serialize(writer));
                if (this.has_fixedSeries)
                    writer.writeMessage(3, this.fixedSeries, () => this.fixedSeries.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupPolicy {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupPolicy();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.label = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.registrationUtxo, () => message.registrationUtxo = dependency_4.co.topl.brambl.models.TransactionOutputAddress.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.fixedSeries, () => message.fixedSeries = dependency_6.co.topl.brambl.models.SeriesId.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GroupPolicy {
                return GroupPolicy.deserialize(bytes);
            }
        }
        export class SeriesPolicy extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                label?: string;
                tokenSupply?: dependency_7.google.protobuf.UInt32Value;
                registrationUtxo?: dependency_4.co.topl.brambl.models.TransactionOutputAddress;
                quantityDescriptor?: dependency_5.co.topl.brambl.models.box.QuantityDescriptorType;
                fungibility?: dependency_5.co.topl.brambl.models.box.FungibilityType;
                ephemeralMetadataScheme?: dependency_8.google.protobuf.Struct;
                permanentMetadataScheme?: dependency_8.google.protobuf.Struct;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                    if ("tokenSupply" in data && data.tokenSupply != undefined) {
                        this.tokenSupply = data.tokenSupply;
                    }
                    if ("registrationUtxo" in data && data.registrationUtxo != undefined) {
                        this.registrationUtxo = data.registrationUtxo;
                    }
                    if ("quantityDescriptor" in data && data.quantityDescriptor != undefined) {
                        this.quantityDescriptor = data.quantityDescriptor;
                    }
                    if ("fungibility" in data && data.fungibility != undefined) {
                        this.fungibility = data.fungibility;
                    }
                    if ("ephemeralMetadataScheme" in data && data.ephemeralMetadataScheme != undefined) {
                        this.ephemeralMetadataScheme = data.ephemeralMetadataScheme;
                    }
                    if ("permanentMetadataScheme" in data && data.permanentMetadataScheme != undefined) {
                        this.permanentMetadataScheme = data.permanentMetadataScheme;
                    }
                }
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set label(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get tokenSupply() {
                return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.UInt32Value, 2) as dependency_7.google.protobuf.UInt32Value;
            }
            set tokenSupply(value: dependency_7.google.protobuf.UInt32Value) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_tokenSupply() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get registrationUtxo() {
                return pb_1.Message.getWrapperField(this, dependency_4.co.topl.brambl.models.TransactionOutputAddress, 3) as dependency_4.co.topl.brambl.models.TransactionOutputAddress;
            }
            set registrationUtxo(value: dependency_4.co.topl.brambl.models.TransactionOutputAddress) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_registrationUtxo() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get quantityDescriptor() {
                return pb_1.Message.getFieldWithDefault(this, 4, dependency_5.co.topl.brambl.models.box.QuantityDescriptorType.LIQUID) as dependency_5.co.topl.brambl.models.box.QuantityDescriptorType;
            }
            set quantityDescriptor(value: dependency_5.co.topl.brambl.models.box.QuantityDescriptorType) {
                pb_1.Message.setField(this, 4, value);
            }
            get fungibility() {
                return pb_1.Message.getFieldWithDefault(this, 5, dependency_5.co.topl.brambl.models.box.FungibilityType.GROUP_AND_SERIES) as dependency_5.co.topl.brambl.models.box.FungibilityType;
            }
            set fungibility(value: dependency_5.co.topl.brambl.models.box.FungibilityType) {
                pb_1.Message.setField(this, 5, value);
            }
            get ephemeralMetadataScheme() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Struct, 6) as dependency_8.google.protobuf.Struct;
            }
            set ephemeralMetadataScheme(value: dependency_8.google.protobuf.Struct) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_ephemeralMetadataScheme() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get permanentMetadataScheme() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Struct, 7) as dependency_8.google.protobuf.Struct;
            }
            set permanentMetadataScheme(value: dependency_8.google.protobuf.Struct) {
                pb_1.Message.setWrapperField(this, 7, value);
            }
            get has_permanentMetadataScheme() {
                return pb_1.Message.getField(this, 7) != null;
            }
            static fromObject(data: {
                label?: string;
                tokenSupply?: ReturnType<typeof dependency_7.google.protobuf.UInt32Value.prototype.toObject>;
                registrationUtxo?: ReturnType<typeof dependency_4.co.topl.brambl.models.TransactionOutputAddress.prototype.toObject>;
                quantityDescriptor?: dependency_5.co.topl.brambl.models.box.QuantityDescriptorType;
                fungibility?: dependency_5.co.topl.brambl.models.box.FungibilityType;
                ephemeralMetadataScheme?: ReturnType<typeof dependency_8.google.protobuf.Struct.prototype.toObject>;
                permanentMetadataScheme?: ReturnType<typeof dependency_8.google.protobuf.Struct.prototype.toObject>;
            }): SeriesPolicy {
                const message = new SeriesPolicy({});
                if (data.label != null) {
                    message.label = data.label;
                }
                if (data.tokenSupply != null) {
                    message.tokenSupply = dependency_7.google.protobuf.UInt32Value.fromObject(data.tokenSupply);
                }
                if (data.registrationUtxo != null) {
                    message.registrationUtxo = dependency_4.co.topl.brambl.models.TransactionOutputAddress.fromObject(data.registrationUtxo);
                }
                if (data.quantityDescriptor != null) {
                    message.quantityDescriptor = data.quantityDescriptor;
                }
                if (data.fungibility != null) {
                    message.fungibility = data.fungibility;
                }
                if (data.ephemeralMetadataScheme != null) {
                    message.ephemeralMetadataScheme = dependency_8.google.protobuf.Struct.fromObject(data.ephemeralMetadataScheme);
                }
                if (data.permanentMetadataScheme != null) {
                    message.permanentMetadataScheme = dependency_8.google.protobuf.Struct.fromObject(data.permanentMetadataScheme);
                }
                return message;
            }
            toObject() {
                const data: {
                    label?: string;
                    tokenSupply?: ReturnType<typeof dependency_7.google.protobuf.UInt32Value.prototype.toObject>;
                    registrationUtxo?: ReturnType<typeof dependency_4.co.topl.brambl.models.TransactionOutputAddress.prototype.toObject>;
                    quantityDescriptor?: dependency_5.co.topl.brambl.models.box.QuantityDescriptorType;
                    fungibility?: dependency_5.co.topl.brambl.models.box.FungibilityType;
                    ephemeralMetadataScheme?: ReturnType<typeof dependency_8.google.protobuf.Struct.prototype.toObject>;
                    permanentMetadataScheme?: ReturnType<typeof dependency_8.google.protobuf.Struct.prototype.toObject>;
                } = {};
                if (this.label != null) {
                    data.label = this.label;
                }
                if (this.tokenSupply != null) {
                    data.tokenSupply = this.tokenSupply.toObject();
                }
                if (this.registrationUtxo != null) {
                    data.registrationUtxo = this.registrationUtxo.toObject();
                }
                if (this.quantityDescriptor != null) {
                    data.quantityDescriptor = this.quantityDescriptor;
                }
                if (this.fungibility != null) {
                    data.fungibility = this.fungibility;
                }
                if (this.ephemeralMetadataScheme != null) {
                    data.ephemeralMetadataScheme = this.ephemeralMetadataScheme.toObject();
                }
                if (this.permanentMetadataScheme != null) {
                    data.permanentMetadataScheme = this.permanentMetadataScheme.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.label.length)
                    writer.writeString(1, this.label);
                if (this.has_tokenSupply)
                    writer.writeMessage(2, this.tokenSupply, () => this.tokenSupply.serialize(writer));
                if (this.has_registrationUtxo)
                    writer.writeMessage(3, this.registrationUtxo, () => this.registrationUtxo.serialize(writer));
                if (this.quantityDescriptor != dependency_5.co.topl.brambl.models.box.QuantityDescriptorType.LIQUID)
                    writer.writeEnum(4, this.quantityDescriptor);
                if (this.fungibility != dependency_5.co.topl.brambl.models.box.FungibilityType.GROUP_AND_SERIES)
                    writer.writeEnum(5, this.fungibility);
                if (this.has_ephemeralMetadataScheme)
                    writer.writeMessage(6, this.ephemeralMetadataScheme, () => this.ephemeralMetadataScheme.serialize(writer));
                if (this.has_permanentMetadataScheme)
                    writer.writeMessage(7, this.permanentMetadataScheme, () => this.permanentMetadataScheme.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeriesPolicy {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeriesPolicy();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.label = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.tokenSupply, () => message.tokenSupply = dependency_7.google.protobuf.UInt32Value.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.registrationUtxo, () => message.registrationUtxo = dependency_4.co.topl.brambl.models.TransactionOutputAddress.deserialize(reader));
                            break;
                        case 4:
                            message.quantityDescriptor = reader.readEnum();
                            break;
                        case 5:
                            message.fungibility = reader.readEnum();
                            break;
                        case 6:
                            reader.readMessage(message.ephemeralMetadataScheme, () => message.ephemeralMetadataScheme = dependency_8.google.protobuf.Struct.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.permanentMetadataScheme, () => message.permanentMetadataScheme = dependency_8.google.protobuf.Struct.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SeriesPolicy {
                return SeriesPolicy.deserialize(bytes);
            }
        }
    }
}
