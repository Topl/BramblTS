/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: brambl/models/box/lock.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../identifier";
import * as dependency_2 from "./challenge";
import * as pb_1 from "google-protobuf";
export namespace co.topl.brambl.models.box {
    export class Lock extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            predicate?: Lock.Predicate;
            image?: never;
            commitment?: never;
        } | {
            predicate?: never;
            image?: Lock.Image;
            commitment?: never;
        } | {
            predicate?: never;
            image?: never;
            commitment?: Lock.Commitment;

        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("predicate" in data && data.predicate != undefined) {
                    this.predicate = data.predicate;
                }

                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("commitment" in data && data.commitment != undefined) {
                    this.commitment = data.commitment;

                }
            }
        }
        get predicate() {
            return pb_1.Message.getWrapperField(this, Lock.Predicate, 1) as Lock.Predicate;
        }
        set predicate(value: Lock.Predicate) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_predicate() {
            return pb_1.Message.getField(this, 1) != null;
        }

        get image() {
            return pb_1.Message.getWrapperField(this, Lock.Image, 2) as Lock.Image;
        }
        set image(value: Lock.Image) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get commitment() {
            return pb_1.Message.getWrapperField(this, Lock.Commitment, 3) as Lock.Commitment;
        }
        set commitment(value: Lock.Commitment) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_commitment() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "predicate" | "image" | "commitment";
            } = {
                0: "none",
                1: "predicate",
                2: "image",
                3: "commitment"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            predicate?: ReturnType<typeof Lock.Predicate.prototype.toObject>;
            image?: ReturnType<typeof Lock.Image.prototype.toObject>;
            commitment?: ReturnType<typeof Lock.Commitment.prototype.toObject>;

        }): Lock {
            const message = new Lock({});
            if (data.predicate != null) {
                message.predicate = Lock.Predicate.fromObject(data.predicate);
            }

            if (data.image != null) {
                message.image = Lock.Image.fromObject(data.image);
            }
            if (data.commitment != null) {
                message.commitment = Lock.Commitment.fromObject(data.commitment);

            }
            return message;
        }
        toObject() {
            const data: {
                predicate?: ReturnType<typeof Lock.Predicate.prototype.toObject>;

                image?: ReturnType<typeof Lock.Image.prototype.toObject>;
                commitment?: ReturnType<typeof Lock.Commitment.prototype.toObject>;

            } = {};
            if (this.predicate != null) {
                data.predicate = this.predicate.toObject();
            }

            if (this.image != null) {
                data.image = this.image.toObject();
            }
            if (this.commitment != null) {
                data.commitment = this.commitment.toObject();

            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_predicate)
                writer.writeMessage(1, this.predicate, () => this.predicate.serialize(writer));

            if (this.has_image)
                writer.writeMessage(2, this.image, () => this.image.serialize(writer));
            if (this.has_commitment)
                writer.writeMessage(3, this.commitment, () => this.commitment.serialize(writer));

            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Lock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Lock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.predicate, () => message.predicate = Lock.Predicate.deserialize(reader));
                        break;
                    case 2:

                        reader.readMessage(message.image, () => message.image = Lock.Image.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.commitment, () => message.commitment = Lock.Commitment.deserialize(reader));

                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Lock {
            return Lock.deserialize(bytes);
        }
    }
    export namespace Lock {
        export class Predicate extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {

                challenges?: dependency_2.co.topl.brambl.models.box.Challenge[];

                threshold?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("challenges" in data && data.challenges != undefined) {
                        this.challenges = data.challenges;
                    }
                    if ("threshold" in data && data.threshold != undefined) {
                        this.threshold = data.threshold;
                    }
                }
            }
            get challenges() {

                return pb_1.Message.getRepeatedWrapperField(this, dependency_2.co.topl.brambl.models.box.Challenge, 1) as dependency_2.co.topl.brambl.models.box.Challenge[];
            }
            set challenges(value: dependency_2.co.topl.brambl.models.box.Challenge[]) {

                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get threshold() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set threshold(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {

                challenges?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Challenge.prototype.toObject>[];

                threshold?: number;
            }): Predicate {
                const message = new Predicate({});
                if (data.challenges != null) {

                    message.challenges = data.challenges.map(item => dependency_2.co.topl.brambl.models.box.Challenge.fromObject(item));

                }
                if (data.threshold != null) {
                    message.threshold = data.threshold;
                }
                return message;
            }
            toObject() {
                const data: {

                    challenges?: ReturnType<typeof dependency_2.co.topl.brambl.models.box.Challenge.prototype.toObject>[];
                    threshold?: number;
                } = {};
                if (this.challenges != null) {
                    data.challenges = this.challenges.map((item: dependency_2.co.topl.brambl.models.box.Challenge) => item.toObject());

                }
                if (this.threshold != null) {
                    data.threshold = this.threshold;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.challenges.length)

                    writer.writeRepeatedMessage(1, this.challenges, (item: dependency_2.co.topl.brambl.models.box.Challenge) => item.serialize(writer));

                if (this.threshold != 0)
                    writer.writeUint32(2, this.threshold);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Predicate {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Predicate();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:

                            reader.readMessage(message.challenges, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.co.topl.brambl.models.box.Challenge.deserialize(reader), dependency_2.co.topl.brambl.models.box.Challenge));

                            break;
                        case 2:
                            message.threshold = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Predicate {
                return Predicate.deserialize(bytes);
            }
        }

        export class Image extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                leaves?: dependency_1.co.topl.brambl.models.LockId[];

                threshold?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("leaves" in data && data.leaves != undefined) {
                        this.leaves = data.leaves;
                    }
                    if ("threshold" in data && data.threshold != undefined) {
                        this.threshold = data.threshold;
                    }
                }
            }
            get leaves() {

                return pb_1.Message.getRepeatedWrapperField(this, dependency_1.co.topl.brambl.models.LockId, 1) as dependency_1.co.topl.brambl.models.LockId[];
            }
            set leaves(value: dependency_1.co.topl.brambl.models.LockId[]) {

                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get threshold() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set threshold(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {

                leaves?: ReturnType<typeof dependency_1.co.topl.brambl.models.LockId.prototype.toObject>[];
                threshold?: number;
            }): Image {
                const message = new Image({});
                if (data.leaves != null) {
                    message.leaves = data.leaves.map(item => dependency_1.co.topl.brambl.models.LockId.fromObject(item));

                }
                if (data.threshold != null) {
                    message.threshold = data.threshold;
                }
                return message;
            }
            toObject() {
                const data: {

                    leaves?: ReturnType<typeof dependency_1.co.topl.brambl.models.LockId.prototype.toObject>[];
                    threshold?: number;
                } = {};
                if (this.leaves != null) {
                    data.leaves = this.leaves.map((item: dependency_1.co.topl.brambl.models.LockId) => item.toObject());
                }
                if (this.threshold != null) {
                    data.threshold = this.threshold;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.leaves.length)
                    writer.writeRepeatedMessage(1, this.leaves, (item: dependency_1.co.topl.brambl.models.LockId) => item.serialize(writer));

                if (this.threshold != 0)
                    writer.writeUint32(2, this.threshold);
                if (!w)
                    return writer.getResultBuffer();
            }

            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Image {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Image();

                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:

                            reader.readMessage(message.leaves, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.co.topl.brambl.models.LockId.deserialize(reader), dependency_1.co.topl.brambl.models.LockId));

                            break;
                        case 2:
                            message.threshold = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }

            static deserializeBinary(bytes: Uint8Array): Image {
                return Image.deserialize(bytes);
            }
        }
        export class Commitment extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                root?: dependency_1.co.topl.brambl.models.AccumulatorRootId;

                threshold?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("root" in data && data.root != undefined) {
                        this.root = data.root;
                    }
                    if ("threshold" in data && data.threshold != undefined) {
                        this.threshold = data.threshold;
                    }
                }
            }
            get root() {

                return pb_1.Message.getWrapperField(this, dependency_1.co.topl.brambl.models.AccumulatorRootId, 1) as dependency_1.co.topl.brambl.models.AccumulatorRootId;
            }
            set root(value: dependency_1.co.topl.brambl.models.AccumulatorRootId) {

                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_root() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get threshold() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set threshold(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                root?: ReturnType<typeof dependency_1.co.topl.brambl.models.AccumulatorRootId.prototype.toObject>;
                threshold?: number;
            }): Commitment {
                const message = new Commitment({});
                if (data.root != null) {
                    message.root = dependency_1.co.topl.brambl.models.AccumulatorRootId.fromObject(data.root);

                }
                if (data.threshold != null) {
                    message.threshold = data.threshold;
                }
                return message;
            }
            toObject() {
                const data: {
                    root?: ReturnType<typeof dependency_1.co.topl.brambl.models.AccumulatorRootId.prototype.toObject>;
                    threshold?: number;
                } = {};
                if (this.root != null) {
                    data.root = this.root.toObject();
                }
                if (this.threshold != null) {
                    data.threshold = this.threshold;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_root)
                    writer.writeMessage(1, this.root, () => this.root.serialize(writer));
                if (this.threshold != 0)
                    writer.writeUint32(2, this.threshold);
                if (!w)
                    return writer.getResultBuffer();
            }

            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Commitment {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commitment();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:

                            reader.readMessage(message.root, () => message.root = dependency_1.co.topl.brambl.models.AccumulatorRootId.deserialize(reader));
                            break;
                        case 2:
                            message.threshold = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Commitment {
                return Commitment.deserialize(bytes);
            }
        }
    }
}
