/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: node/models/ratio.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../quivr/models/shared";
import * as pb_1 from "google-protobuf";
export namespace co.topl.node.models {
    export class Ratio extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            numerator?: dependency_2.quivr.models.Int128;
            denominator?: dependency_2.quivr.models.Int128;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("numerator" in data && data.numerator != undefined) {
                    this.numerator = data.numerator;
                }
                if ("denominator" in data && data.denominator != undefined) {
                    this.denominator = data.denominator;
                }
            }
        }
        get numerator() {
            return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.Int128, 1) as dependency_2.quivr.models.Int128;
        }
        set numerator(value: dependency_2.quivr.models.Int128) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_numerator() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get denominator() {
            return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.Int128, 2) as dependency_2.quivr.models.Int128;
        }
        set denominator(value: dependency_2.quivr.models.Int128) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_denominator() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            numerator?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
            denominator?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
        }): Ratio {
            const message = new Ratio({});
            if (data.numerator != null) {
                message.numerator = dependency_2.quivr.models.Int128.fromObject(data.numerator);
            }
            if (data.denominator != null) {
                message.denominator = dependency_2.quivr.models.Int128.fromObject(data.denominator);
            }
            return message;
        }
        toObject() {
            const data: {
                numerator?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
                denominator?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
            } = {};
            if (this.numerator != null) {
                data.numerator = this.numerator.toObject();
            }
            if (this.denominator != null) {
                data.denominator = this.denominator.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_numerator)
                writer.writeMessage(1, this.numerator, () => this.numerator.serialize(writer));
            if (this.has_denominator)
                writer.writeMessage(2, this.denominator, () => this.denominator.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ratio {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ratio();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.numerator, () => message.numerator = dependency_2.quivr.models.Int128.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.denominator, () => message.denominator = dependency_2.quivr.models.Int128.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ratio {
            return Ratio.deserialize(bytes);
        }
    }
}
