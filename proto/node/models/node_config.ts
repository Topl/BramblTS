/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: node/models/node_config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.node {
    export class NodeConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            slot?: number;
            slotDurationMillis?: number;
            epochLength?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("slot" in data && data.slot != undefined) {
                    this.slot = data.slot;
                }
                if ("slotDurationMillis" in data && data.slotDurationMillis != undefined) {
                    this.slotDurationMillis = data.slotDurationMillis;
                }
                if ("epochLength" in data && data.epochLength != undefined) {
                    this.epochLength = data.epochLength;
                }
            }
        }
        get slot() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set slot(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get slotDurationMillis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set slotDurationMillis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get epochLength() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set epochLength(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            slot?: number;
            slotDurationMillis?: number;
            epochLength?: number;
        }): NodeConfig {
            const message = new NodeConfig({});
            if (data.slot != null) {
                message.slot = data.slot;
            }
            if (data.slotDurationMillis != null) {
                message.slotDurationMillis = data.slotDurationMillis;
            }
            if (data.epochLength != null) {
                message.epochLength = data.epochLength;
            }
            return message;
        }
        toObject() {
            const data: {
                slot?: number;
                slotDurationMillis?: number;
                epochLength?: number;
            } = {};
            if (this.slot != null) {
                data.slot = this.slot;
            }
            if (this.slotDurationMillis != null) {
                data.slotDurationMillis = this.slotDurationMillis;
            }
            if (this.epochLength != null) {
                data.epochLength = this.epochLength;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.slot != 0)
                writer.writeUint64(1, this.slot);
            if (this.slotDurationMillis != 0)
                writer.writeUint64(2, this.slotDurationMillis);
            if (this.epochLength != 0)
                writer.writeUint64(3, this.epochLength);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.slot = reader.readUint64();
                        break;
                    case 2:
                        message.slotDurationMillis = reader.readUint64();
                        break;
                    case 3:
                        message.epochLength = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NodeConfig {
            return NodeConfig.deserialize(bytes);
        }
    }
}
