/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: node/models/node_epochData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../quivr/models/shared";
import * as pb_1 from "google-protobuf";
export namespace co.topl.proto.node {
    export class EpochData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch?: number;
            eon?: number;
            era?: number;
            isComplete?: boolean;
            startHeight?: number;
            endHeight?: number;
            startSlot?: number;
            endSlot?: number;
            startTimestamp?: number;
            endTimestamp?: number;
            transactionCount?: number;
            totalTransactionReward?: dependency_2.quivr.models.Int128;
            activeStake?: dependency_2.quivr.models.Int128;
            inactiveStake?: dependency_2.quivr.models.Int128;
            dataBytes?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("eon" in data && data.eon != undefined) {
                    this.eon = data.eon;
                }
                if ("era" in data && data.era != undefined) {
                    this.era = data.era;
                }
                if ("isComplete" in data && data.isComplete != undefined) {
                    this.isComplete = data.isComplete;
                }
                if ("startHeight" in data && data.startHeight != undefined) {
                    this.startHeight = data.startHeight;
                }
                if ("endHeight" in data && data.endHeight != undefined) {
                    this.endHeight = data.endHeight;
                }
                if ("startSlot" in data && data.startSlot != undefined) {
                    this.startSlot = data.startSlot;
                }
                if ("endSlot" in data && data.endSlot != undefined) {
                    this.endSlot = data.endSlot;
                }
                if ("startTimestamp" in data && data.startTimestamp != undefined) {
                    this.startTimestamp = data.startTimestamp;
                }
                if ("endTimestamp" in data && data.endTimestamp != undefined) {
                    this.endTimestamp = data.endTimestamp;
                }
                if ("transactionCount" in data && data.transactionCount != undefined) {
                    this.transactionCount = data.transactionCount;
                }
                if ("totalTransactionReward" in data && data.totalTransactionReward != undefined) {
                    this.totalTransactionReward = data.totalTransactionReward;
                }
                if ("activeStake" in data && data.activeStake != undefined) {
                    this.activeStake = data.activeStake;
                }
                if ("inactiveStake" in data && data.inactiveStake != undefined) {
                    this.inactiveStake = data.inactiveStake;
                }
                if ("dataBytes" in data && data.dataBytes != undefined) {
                    this.dataBytes = data.dataBytes;
                }
            }
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set epoch(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get eon() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set eon(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get era() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set era(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get isComplete() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isComplete(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get startHeight() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set startHeight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get endHeight() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set endHeight(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get startSlot() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set startSlot(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get endSlot() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set endSlot(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get startTimestamp() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set startTimestamp(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get endTimestamp() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set endTimestamp(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get transactionCount() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set transactionCount(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get totalTransactionReward() {
            return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.Int128, 12) as dependency_2.quivr.models.Int128;
        }
        set totalTransactionReward(value: dependency_2.quivr.models.Int128) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_totalTransactionReward() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get activeStake() {
            return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.Int128, 13) as dependency_2.quivr.models.Int128;
        }
        set activeStake(value: dependency_2.quivr.models.Int128) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_activeStake() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get inactiveStake() {
            return pb_1.Message.getWrapperField(this, dependency_2.quivr.models.Int128, 14) as dependency_2.quivr.models.Int128;
        }
        set inactiveStake(value: dependency_2.quivr.models.Int128) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_inactiveStake() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get dataBytes() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set dataBytes(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            epoch?: number;
            eon?: number;
            era?: number;
            isComplete?: boolean;
            startHeight?: number;
            endHeight?: number;
            startSlot?: number;
            endSlot?: number;
            startTimestamp?: number;
            endTimestamp?: number;
            transactionCount?: number;
            totalTransactionReward?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
            activeStake?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
            inactiveStake?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
            dataBytes?: number;
        }): EpochData {
            const message = new EpochData({});
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            if (data.eon != null) {
                message.eon = data.eon;
            }
            if (data.era != null) {
                message.era = data.era;
            }
            if (data.isComplete != null) {
                message.isComplete = data.isComplete;
            }
            if (data.startHeight != null) {
                message.startHeight = data.startHeight;
            }
            if (data.endHeight != null) {
                message.endHeight = data.endHeight;
            }
            if (data.startSlot != null) {
                message.startSlot = data.startSlot;
            }
            if (data.endSlot != null) {
                message.endSlot = data.endSlot;
            }
            if (data.startTimestamp != null) {
                message.startTimestamp = data.startTimestamp;
            }
            if (data.endTimestamp != null) {
                message.endTimestamp = data.endTimestamp;
            }
            if (data.transactionCount != null) {
                message.transactionCount = data.transactionCount;
            }
            if (data.totalTransactionReward != null) {
                message.totalTransactionReward = dependency_2.quivr.models.Int128.fromObject(data.totalTransactionReward);
            }
            if (data.activeStake != null) {
                message.activeStake = dependency_2.quivr.models.Int128.fromObject(data.activeStake);
            }
            if (data.inactiveStake != null) {
                message.inactiveStake = dependency_2.quivr.models.Int128.fromObject(data.inactiveStake);
            }
            if (data.dataBytes != null) {
                message.dataBytes = data.dataBytes;
            }
            return message;
        }
        toObject() {
            const data: {
                epoch?: number;
                eon?: number;
                era?: number;
                isComplete?: boolean;
                startHeight?: number;
                endHeight?: number;
                startSlot?: number;
                endSlot?: number;
                startTimestamp?: number;
                endTimestamp?: number;
                transactionCount?: number;
                totalTransactionReward?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
                activeStake?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
                inactiveStake?: ReturnType<typeof dependency_2.quivr.models.Int128.prototype.toObject>;
                dataBytes?: number;
            } = {};
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.eon != null) {
                data.eon = this.eon;
            }
            if (this.era != null) {
                data.era = this.era;
            }
            if (this.isComplete != null) {
                data.isComplete = this.isComplete;
            }
            if (this.startHeight != null) {
                data.startHeight = this.startHeight;
            }
            if (this.endHeight != null) {
                data.endHeight = this.endHeight;
            }
            if (this.startSlot != null) {
                data.startSlot = this.startSlot;
            }
            if (this.endSlot != null) {
                data.endSlot = this.endSlot;
            }
            if (this.startTimestamp != null) {
                data.startTimestamp = this.startTimestamp;
            }
            if (this.endTimestamp != null) {
                data.endTimestamp = this.endTimestamp;
            }
            if (this.transactionCount != null) {
                data.transactionCount = this.transactionCount;
            }
            if (this.totalTransactionReward != null) {
                data.totalTransactionReward = this.totalTransactionReward.toObject();
            }
            if (this.activeStake != null) {
                data.activeStake = this.activeStake.toObject();
            }
            if (this.inactiveStake != null) {
                data.inactiveStake = this.inactiveStake.toObject();
            }
            if (this.dataBytes != null) {
                data.dataBytes = this.dataBytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.epoch != 0)
                writer.writeUint64(1, this.epoch);
            if (this.eon != 0)
                writer.writeUint64(2, this.eon);
            if (this.era != 0)
                writer.writeUint64(3, this.era);
            if (this.isComplete != false)
                writer.writeBool(4, this.isComplete);
            if (this.startHeight != 0)
                writer.writeUint64(5, this.startHeight);
            if (this.endHeight != 0)
                writer.writeUint64(6, this.endHeight);
            if (this.startSlot != 0)
                writer.writeUint64(7, this.startSlot);
            if (this.endSlot != 0)
                writer.writeUint64(8, this.endSlot);
            if (this.startTimestamp != 0)
                writer.writeUint64(9, this.startTimestamp);
            if (this.endTimestamp != 0)
                writer.writeUint64(10, this.endTimestamp);
            if (this.transactionCount != 0)
                writer.writeUint64(11, this.transactionCount);
            if (this.has_totalTransactionReward)
                writer.writeMessage(12, this.totalTransactionReward, () => this.totalTransactionReward.serialize(writer));
            if (this.has_activeStake)
                writer.writeMessage(13, this.activeStake, () => this.activeStake.serialize(writer));
            if (this.has_inactiveStake)
                writer.writeMessage(14, this.inactiveStake, () => this.inactiveStake.serialize(writer));
            if (this.dataBytes != 0)
                writer.writeUint64(15, this.dataBytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EpochData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EpochData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.epoch = reader.readUint64();
                        break;
                    case 2:
                        message.eon = reader.readUint64();
                        break;
                    case 3:
                        message.era = reader.readUint64();
                        break;
                    case 4:
                        message.isComplete = reader.readBool();
                        break;
                    case 5:
                        message.startHeight = reader.readUint64();
                        break;
                    case 6:
                        message.endHeight = reader.readUint64();
                        break;
                    case 7:
                        message.startSlot = reader.readUint64();
                        break;
                    case 8:
                        message.endSlot = reader.readUint64();
                        break;
                    case 9:
                        message.startTimestamp = reader.readUint64();
                        break;
                    case 10:
                        message.endTimestamp = reader.readUint64();
                        break;
                    case 11:
                        message.transactionCount = reader.readUint64();
                        break;
                    case 12:
                        reader.readMessage(message.totalTransactionReward, () => message.totalTransactionReward = dependency_2.quivr.models.Int128.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.activeStake, () => message.activeStake = dependency_2.quivr.models.Int128.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.inactiveStake, () => message.inactiveStake = dependency_2.quivr.models.Int128.deserialize(reader));
                        break;
                    case 15:
                        message.dataBytes = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EpochData {
            return EpochData.deserialize(bytes);
        }
    }
}
